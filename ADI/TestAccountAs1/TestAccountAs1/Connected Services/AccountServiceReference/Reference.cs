//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestAccountAs1.AccountServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/Assigment1_WCF.Models.DataModels")]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CMNDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodePinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MoneyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountName {
            get {
                return this.AccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNameField, value) != true)) {
                    this.AccountNameField = value;
                    this.RaisePropertyChanged("AccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountNumber {
            get {
                return this.AccountNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNumberField, value) != true)) {
                    this.AccountNumberField = value;
                    this.RaisePropertyChanged("AccountNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CMND {
            get {
                return this.CMNDField;
            }
            set {
                if ((this.CMNDField.Equals(value) != true)) {
                    this.CMNDField = value;
                    this.RaisePropertyChanged("CMND");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CodePin {
            get {
                return this.CodePinField;
            }
            set {
                if ((this.CodePinField.Equals(value) != true)) {
                    this.CodePinField = value;
                    this.RaisePropertyChanged("CodePin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Money {
            get {
                return this.MoneyField;
            }
            set {
                if ((this.MoneyField.Equals(value) != true)) {
                    this.MoneyField = value;
                    this.RaisePropertyChanged("Money");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountServiceReference.IAccountService")]
    public interface IAccountService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetAccountList", ReplyAction="http://tempuri.org/IAccountService/GetAccountListResponse")]
        TestAccountAs1.AccountServiceReference.Account[] GetAccountList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetAccountList", ReplyAction="http://tempuri.org/IAccountService/GetAccountListResponse")]
        System.Threading.Tasks.Task<TestAccountAs1.AccountServiceReference.Account[]> GetAccountListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddAccount", ReplyAction="http://tempuri.org/IAccountService/AddAccountResponse")]
        void AddAccount(TestAccountAs1.AccountServiceReference.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddAccount", ReplyAction="http://tempuri.org/IAccountService/AddAccountResponse")]
        System.Threading.Tasks.Task AddAccountAsync(TestAccountAs1.AccountServiceReference.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetAccountById", ReplyAction="http://tempuri.org/IAccountService/GetAccountByIdResponse")]
        TestAccountAs1.AccountServiceReference.Account GetAccountById(string accountNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetAccountById", ReplyAction="http://tempuri.org/IAccountService/GetAccountByIdResponse")]
        System.Threading.Tasks.Task<TestAccountAs1.AccountServiceReference.Account> GetAccountByIdAsync(string accountNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/UpdateAccount", ReplyAction="http://tempuri.org/IAccountService/UpdateAccountResponse")]
        void UpdateAccount(TestAccountAs1.AccountServiceReference.Account ac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/UpdateAccount", ReplyAction="http://tempuri.org/IAccountService/UpdateAccountResponse")]
        System.Threading.Tasks.Task UpdateAccountAsync(TestAccountAs1.AccountServiceReference.Account ac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/DeleteAccount", ReplyAction="http://tempuri.org/IAccountService/DeleteAccountResponse")]
        void DeleteAccount(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/DeleteAccount", ReplyAction="http://tempuri.org/IAccountService/DeleteAccountResponse")]
        System.Threading.Tasks.Task DeleteAccountAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountServiceChannel : TestAccountAs1.AccountServiceReference.IAccountService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountServiceClient : System.ServiceModel.ClientBase<TestAccountAs1.AccountServiceReference.IAccountService>, TestAccountAs1.AccountServiceReference.IAccountService {
        
        public AccountServiceClient() {
        }
        
        public AccountServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestAccountAs1.AccountServiceReference.Account[] GetAccountList() {
            return base.Channel.GetAccountList();
        }
        
        public System.Threading.Tasks.Task<TestAccountAs1.AccountServiceReference.Account[]> GetAccountListAsync() {
            return base.Channel.GetAccountListAsync();
        }
        
        public void AddAccount(TestAccountAs1.AccountServiceReference.Account account) {
            base.Channel.AddAccount(account);
        }
        
        public System.Threading.Tasks.Task AddAccountAsync(TestAccountAs1.AccountServiceReference.Account account) {
            return base.Channel.AddAccountAsync(account);
        }
        
        public TestAccountAs1.AccountServiceReference.Account GetAccountById(string accountNumber) {
            return base.Channel.GetAccountById(accountNumber);
        }
        
        public System.Threading.Tasks.Task<TestAccountAs1.AccountServiceReference.Account> GetAccountByIdAsync(string accountNumber) {
            return base.Channel.GetAccountByIdAsync(accountNumber);
        }
        
        public void UpdateAccount(TestAccountAs1.AccountServiceReference.Account ac) {
            base.Channel.UpdateAccount(ac);
        }
        
        public System.Threading.Tasks.Task UpdateAccountAsync(TestAccountAs1.AccountServiceReference.Account ac) {
            return base.Channel.UpdateAccountAsync(ac);
        }
        
        public void DeleteAccount(string id) {
            base.Channel.DeleteAccount(id);
        }
        
        public System.Threading.Tasks.Task DeleteAccountAsync(string id) {
            return base.Channel.DeleteAccountAsync(id);
        }
    }
}
